type Comment {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  commentList: [Comment] @materializer(query: "getCommentUsingPost_id")
  created_at: DateTime
  id: ID!
  media: String
  title: String
  topic: Topic
    @materializer(
      query: "getTopic"
      arguments: [{ name: "id", field: "topic_id" }]
    )
  topic_id: ID
  username: String
  voteList: [Vote] @materializer(query: "getVoteUsingPost_id")
}

type Topic {
  created_at: DateTime
  id: ID!

  postList: [Post] @materializer(query: "getPostUsingTopic_id")
  topic: String!
  numOfPosts: Int
}

type Vote {
  created_at: DateTime
  downvote: Boolean
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  upvote: Boolean
  username: String
}

type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."post_id", T."text", T."username"
        FROM "public"."comment" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )

  getVoteUsingPost_id(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."downvote", T."id", T."post_id", T."upvote", T."username"
        FROM "public"."vote" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getTopicList: [Topic]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "topic"
      configuration: "postgresql_config"
    )
  getTopicListByString (topic:String!): [Topic]
  @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
        select * from "topic" where topic=TRIM($1)
      """
      configuration: "postgresql_config"
  )
  getTopic(id: ID!): Topic
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "topic"
      configuration: "postgresql_config"
    )
  getPostUsingTopic_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."media", T."title", T."topic_id", T."username"
        FROM "public"."post" T
        WHERE T."topic_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}


type Mutation {
  insertComment(
    post_id: ID!
    text: String!
    created_at: DateTime!
    username: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String!
    topic_id: ID!
    media: String!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertTopic (
    topic: String!
    numOfPosts: Int!
  ): Topic
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "topic"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteTopic(id: ID!): Topic
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "topic"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    post_id: ID!
    created_at: DateTime!
    upvote: Boolean!
    downvote: Boolean!
    username: String!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
